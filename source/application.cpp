///////////////////////////////////////////////
//*-----------------------------------------*//
//| Auto-Generated by the Core Engine       |//
//| Direct modifications may be overwritten |//
//*-----------------------------------------*//
///////////////////////////////////////////////
#include "main.h"


// ****************************************************************
// project settings
const coreChar* const CoreApp::Settings::Name                          = "Endless Journey";
const coreChar* const CoreApp::Settings::Version                       = "1.0.0";
const coreChar* const CoreApp::Settings::IconPath                      = "data/textures/game_icon.webp";
const coreChar* const CoreApp::Settings::CursorPath                    = "data/textures/default_cursor.webp";
const coreBool        CoreApp::Settings::UserManagement                = false;
const coreUint8       CoreApp::Settings::Graphics::DepthSize           = 16u;
const coreUint8       CoreApp::Settings::Graphics::StencilSize         = 8u;
const coreBool        CoreApp::Settings::Graphics::AlphaChannel        = false;
const coreBool        CoreApp::Settings::Graphics::DoubleBuffer        = true;
const coreBool        CoreApp::Settings::Graphics::StereoRender        = false;
const coreUint32      CoreApp::Settings::Platform::SteamAppID          = 0u;
const coreChar* const CoreApp::Settings::Platform::EpicProductID       = NULL;
const coreChar* const CoreApp::Settings::Platform::EpicSandboxID   [3] = {NULL, NULL, NULL};
const coreChar* const CoreApp::Settings::Platform::EpicDeploymentID[3] = {NULL, NULL, NULL};
const coreChar* const CoreApp::Settings::Platform::EpicClientID        = NULL;
const coreChar* const CoreApp::Settings::Platform::EpicClientSecret    = NULL;


// ****************************************************************
// setup the application
void CoreApp::Setup()
{
    Core::Manager::Resource->Load<coreModel> ("default_cube.md3",        CORE_RESOURCE_UPDATE_AUTO,   "data/models/default_cube.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel> ("default_sphere.md3",      CORE_RESOURCE_UPDATE_AUTO,   "data/models/default_sphere.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel> ("object_block.md3",        CORE_RESOURCE_UPDATE_AUTO,   "data/models/object_block.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel> ("object_enemy.md3",        CORE_RESOURCE_UPDATE_AUTO,   "data/models/object_enemy.md3", CORE_MODEL_LOAD_NO_CLUSTERS);

    Core::Manager::Resource->Load<coreShader>("object_block.vert",       CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object_block.vert");
    Core::Manager::Resource->Load<coreShader>("object_block.frag",       CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object_block.frag");
    Core::Manager::Resource->Load<coreShader>("object_block_inst.vert",  CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object_block.vert", CORE_SHADER_OPTION_INSTANCING);
    Core::Manager::Resource->Load<coreShader>("object_block_inst.frag",  CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object_block.frag", CORE_SHADER_OPTION_INSTANCING);
    Core::Manager::Resource->Load<coreShader>("object_enemy.vert",       CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object_enemy.vert");
    Core::Manager::Resource->Load<coreShader>("object_enemy.frag",       CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object_enemy.frag");
    Core::Manager::Resource->Load<coreShader>("object_enemy_inst.vert",  CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object_enemy.vert", CORE_SHADER_OPTION_INSTANCING);
    Core::Manager::Resource->Load<coreShader>("object_enemy_inst.frag",  CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object_enemy.frag", CORE_SHADER_OPTION_INSTANCING);
    Core::Manager::Resource->Load<coreShader>("object_player.vert",      CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object_player.vert", CORE_SHADER_OPTION_NO_ROTATION);
    Core::Manager::Resource->Load<coreShader>("object_player.frag",      CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object_player.frag");
    Core::Manager::Resource->Load<coreShader>("shadow_layer.vert",       CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/shadow_layer.vert", CORE_SHADER_OPTION_NO_ROTATION);
    Core::Manager::Resource->Load<coreShader>("shadow_layer.frag",       CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/shadow_layer.frag");
    Core::Manager::Resource->Load<coreShader>("shadow_object.vert",      CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/shadow_object.vert", CORE_SHADER_OPTION_NO_ROTATION);
    Core::Manager::Resource->Load<coreShader>("shadow_object.frag",      CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/shadow_object.frag", CORE_SHADER_OPTION_NO_EARLY_DEPTH);
    Core::Manager::Resource->Load<coreShader>("shadow_object_inst.vert", CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/shadow_object.vert", CORE_SHADER_OPTION_INSTANCING CORE_SHADER_OPTION_NO_ROTATION);
    Core::Manager::Resource->Load<coreShader>("shadow_object_inst.frag", CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/shadow_object.frag", CORE_SHADER_OPTION_INSTANCING CORE_SHADER_OPTION_NO_EARLY_DEPTH);

    Core::Manager::Resource->Load<coreSound> ("bell.opus",               CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/bell.opus");
    Core::Manager::Resource->Load<coreSound> ("kick.opus",               CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/kick.opus", CORE_SOUND_LOAD_MULAW);

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("object_block_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("object_block.vert")
        ->AttachShader("object_block.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("object_block_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("object_block_inst.vert")
        ->AttachShader("object_block_inst.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("object_enemy_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("object_enemy.vert")
        ->AttachShader("object_enemy.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("object_enemy_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("object_enemy_inst.vert")
        ->AttachShader("object_enemy_inst.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("object_player_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("object_player.vert")
        ->AttachShader("object_player.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("shadow_layer_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("shadow_layer.vert")
        ->AttachShader("shadow_layer.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("shadow_object_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("shadow_object.vert")
        ->AttachShader("shadow_object.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("shadow_object_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("shadow_object_inst.vert")
        ->AttachShader("shadow_object_inst.frag")
        ->Finish();
}